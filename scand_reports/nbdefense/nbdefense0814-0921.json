{"root": "/Users/david/Desktop/Notebooks/amazon_segemaker_examples", "root_issues": [], "plugins": [{"name": "PII Plugin", "settings": {"enabled": true, "confidence_threshold": 0.8, "entities": {"US_PASSPORT": true, "AU_MEDICARE": true, "AU_TFN": true, "AU_ACN": true, "AU_ABN": true, "UK_NHS": true, "US_SSN": true, "US_ITIN": true, "US_DRIVER_LICENSE": true, "US_BANK_NUMBER": true, "MEDICAL_LICENSE": true, "LOCATION": true, "PHONE_NUMBER": true, "NRP": true, "IP_ADDRESS": true, "EMAIL_ADDRESS": true, "IBAN_CODE": true, "CRYPTO": true, "CREDIT_CARD": true, "PERSON": true}}}, {"name": "Secrets Plugin", "settings": {"enabled": true, "secrets_plugins": [{"name": "SoftlayerDetector"}, {"name": "StripeDetector"}, {"name": "SendGridDetector"}, {"name": "NpmDetector"}, {"name": "KeywordDetector", "keyword_exclude": ""}, {"name": "IbmCosHmacDetector"}, {"name": "DiscordBotTokenDetector"}, {"name": "BasicAuthDetector"}, {"name": "AzureStorageKeyDetector"}, {"name": "ArtifactoryDetector"}, {"name": "AWSKeyDetector"}, {"name": "CloudantDetector"}, {"name": "GitHubTokenDetector"}, {"name": "IbmCloudIamDetector"}, {"name": "JwtTokenDetector"}, {"name": "MailchimpDetector"}, {"name": "PrivateKeyDetector"}, {"name": "SlackDetector"}, {"name": "SquareOAuthDetector"}, {"name": "TwilioKeyDetector"}, {"name": "Base64HighEntropyString", "limit": 4.5}, {"name": "HexHighEntropyString", "limit": 3.0}]}}], "notebooks": ["/Users/david/Desktop/Notebooks/amazon_segemaker_examples/vector-enrichment-reverse-geocoding.ipynb", "/Users/david/Desktop/Notebooks/amazon_segemaker_examples/geospatial-processing-ndvi-intro.ipynb", "/Users/david/Desktop/Notebooks/amazon_segemaker_examples/vector-enrichment-map-matching.ipynb", "/Users/david/Desktop/Notebooks/amazon_segemaker_examples/monitor_methane_ch4_emission_point_sources.ipynb", "/Users/david/Desktop/Notebooks/amazon_segemaker_examples/mount_shasta_glacier_melt_monitoring.ipynb", "/Users/david/Desktop/Notebooks/amazon_segemaker_examples/lake_mead_drought_monitoring.ipynb", "/Users/david/Desktop/Notebooks/amazon_segemaker_examples/dixie-wildfire-damage-assessment.ipynb"], "notebook_issues": [{"path": "/Users/david/Desktop/Notebooks/amazon_segemaker_examples/vector-enrichment-reverse-geocoding.ipynb", "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 5, "cell_type": "SOURCE", "scrubbed_content": "import boto3\nimport [PII]\nimport sagemaker_geospatial_map\n\nsession = boto3.Session()\nexecution_role = sagemaker.get_execution_role()\ngeospatial_client = session.client(service_name=\"sagemaker-geospatial\")"}, "location": "INPUT", "details": {"description": "A total of 1 PII found in cell number 5", "summary_field": {"PERSON": 1}}, "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 5, "cell_type": "SOURCE", "scrubbed_content": "import boto3\nimport [PII]\nimport sagemaker_geospatial_map\n\nsession = boto3.Session()\nexecution_role = sagemaker.get_execution_role()\ngeospatial_client = session.client(service_name=\"sagemaker-geospatial\")"}, "line_index": 1, "location": "INPUT", "character_start_index": 7, "character_end_index": 16, "details": null}]}, {"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 6, "cell_type": "MARKDOWN", "scrubbed_content": "## Dataset: [PII] Housing Data\nThe [PII] Housing dataset contains information from the 1990 [PII] census. We will use the dataset to demonstrate how to resolve the latitude and longitude into human readable address information. The dataset contains the following columns:\n\n- `MedInc` - average income\n- `HouseAge` - housing average age\n- `TotalRooms` - total rooms\n- `TotalBedrms` - total bedrooms\n- `Population` - population\n- `Households` - amount of households\n- `Latitude` - latitude\n- `Longitude` - longitude\n\nThe California Housing dataset was originally published in:\n\n> [PII], [PII], and [PII]. \"Sparse spatial autoregressions.\" Statistics & Probability Letters 33.3 (1997): 291-297."}, "location": "INPUT", "details": {"description": "A total of 5 PII found in cell number 6", "summary_field": {"LOCATION": 2, "PERSON": 3}}, "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 6, "cell_type": "MARKDOWN", "scrubbed_content": "## Dataset: [PII] Housing Data\nThe [PII] Housing dataset contains information from the 1990 [PII] census. We will use the dataset to demonstrate how to resolve the latitude and longitude into human readable address information. The dataset contains the following columns:\n\n- `MedInc` - average income\n- `HouseAge` - housing average age\n- `TotalRooms` - total rooms\n- `TotalBedrms` - total bedrooms\n- `Population` - population\n- `Households` - amount of households\n- `Latitude` - latitude\n- `Longitude` - longitude\n\nThe California Housing dataset was originally published in:\n\n> [PII], [PII], and [PII]. \"Sparse spatial autoregressions.\" Statistics & Probability Letters 33.3 (1997): 291-297."}, "line_index": 0, "location": "INPUT", "character_start_index": 12, "character_end_index": 22, "details": null}, {"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 6, "cell_type": "MARKDOWN", "scrubbed_content": "## Dataset: [PII] Housing Data\nThe [PII] Housing dataset contains information from the 1990 [PII] census. We will use the dataset to demonstrate how to resolve the latitude and longitude into human readable address information. The dataset contains the following columns:\n\n- `MedInc` - average income\n- `HouseAge` - housing average age\n- `TotalRooms` - total rooms\n- `TotalBedrms` - total bedrooms\n- `Population` - population\n- `Households` - amount of households\n- `Latitude` - latitude\n- `Longitude` - longitude\n\nThe California Housing dataset was originally published in:\n\n> [PII], [PII], and [PII]. \"Sparse spatial autoregressions.\" Statistics & Probability Letters 33.3 (1997): 291-297."}, "line_index": 1, "location": "INPUT", "character_start_index": 66, "character_end_index": 76, "details": null}, {"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 6, "cell_type": "MARKDOWN", "scrubbed_content": "## Dataset: [PII] Housing Data\nThe [PII] Housing dataset contains information from the 1990 [PII] census. We will use the dataset to demonstrate how to resolve the latitude and longitude into human readable address information. The dataset contains the following columns:\n\n- `MedInc` - average income\n- `HouseAge` - housing average age\n- `TotalRooms` - total rooms\n- `TotalBedrms` - total bedrooms\n- `Population` - population\n- `Households` - amount of households\n- `Latitude` - latitude\n- `Longitude` - longitude\n\nThe California Housing dataset was originally published in:\n\n> [PII], [PII], and [PII]. \"Sparse spatial autoregressions.\" Statistics & Probability Letters 33.3 (1997): 291-297."}, "line_index": 14, "location": "INPUT", "character_start_index": 2, "character_end_index": 6, "details": null}, {"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 6, "cell_type": "MARKDOWN", "scrubbed_content": "## Dataset: [PII] Housing Data\nThe [PII] Housing dataset contains information from the 1990 [PII] census. We will use the dataset to demonstrate how to resolve the latitude and longitude into human readable address information. The dataset contains the following columns:\n\n- `MedInc` - average income\n- `HouseAge` - housing average age\n- `TotalRooms` - total rooms\n- `TotalBedrms` - total bedrooms\n- `Population` - population\n- `Households` - amount of households\n- `Latitude` - latitude\n- `Longitude` - longitude\n\nThe California Housing dataset was originally published in:\n\n> [PII], [PII], and [PII]. \"Sparse spatial autoregressions.\" Statistics & Probability Letters 33.3 (1997): 291-297."}, "line_index": 14, "location": "INPUT", "character_start_index": 8, "character_end_index": 17, "details": null}, {"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 6, "cell_type": "MARKDOWN", "scrubbed_content": "## Dataset: [PII] Housing Data\nThe [PII] Housing dataset contains information from the 1990 [PII] census. We will use the dataset to demonstrate how to resolve the latitude and longitude into human readable address information. The dataset contains the following columns:\n\n- `MedInc` - average income\n- `HouseAge` - housing average age\n- `TotalRooms` - total rooms\n- `TotalBedrms` - total bedrooms\n- `Population` - population\n- `Households` - amount of households\n- `Latitude` - latitude\n- `Longitude` - longitude\n\nThe California Housing dataset was originally published in:\n\n> [PII], [PII], and [PII]. \"Sparse spatial autoregressions.\" Statistics & Probability Letters 33.3 (1997): 291-297."}, "line_index": 14, "location": "INPUT", "character_start_index": 23, "character_end_index": 35, "details": null}]}]}, {"path": "/Users/david/Desktop/Notebooks/amazon_segemaker_examples/geospatial-processing-ndvi-intro.ipynb", "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 5, "cell_type": "SOURCE", "scrubbed_content": "import boto3\nimport [PII]\nimport json\nimport sagemaker_geospatial_map\n\nsession = boto3.Session()\nexecution_role = sagemaker.get_execution_role()\ngeospatial_client = session.client(service_name=\"sagemaker-geospatial\")"}, "location": "INPUT", "details": {"description": "A total of 1 PII found in cell number 5", "summary_field": {"PERSON": 1}}, "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 5, "cell_type": "SOURCE", "scrubbed_content": "import boto3\nimport [PII]\nimport json\nimport sagemaker_geospatial_map\n\nsession = boto3.Session()\nexecution_role = sagemaker.get_execution_role()\ngeospatial_client = session.client(service_name=\"sagemaker-geospatial\")"}, "line_index": 1, "location": "INPUT", "character_start_index": 7, "character_end_index": 16, "details": null}]}, {"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 6, "cell_type": "MARKDOWN", "scrubbed_content": "## Query the Sentinel-2 raster data collection using SearchRasterDataCollection\n\nWith `search_raster_data_collection` you can query supported raster data collections. This example uses data that's pulled from Sentinel-2 satellites. The area of interest (AreaOfInterest) specified is western [PII], and the time range (TimeRangeFilter) is January 1, 2022 to December 30, 2022.\n\nIn following code examples you use the ARN associated with Sentinel-2 raster data collection, `arn:aws:sagemaker-geospatial:us-west-2:378778860802:raster-data-collection/public/nmqj48dcu3g7ayw8`.\n\nA search_raster_data_collection API request requires two parameters:\n- `Arn`: The Amazon name resource (ARN) that corresponds to the raster data collection that you want to query.\n- `RasterDataCollectionQuery`: The RasterDataCollectionQuery parameter, which contains the area of interest as well as the desired time range."}, "location": "INPUT", "details": {"description": "A total of 1 PII found in cell number 6", "summary_field": {"LOCATION": 1}}, "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 6, "cell_type": "MARKDOWN", "scrubbed_content": "## Query the Sentinel-2 raster data collection using SearchRasterDataCollection\n\nWith `search_raster_data_collection` you can query supported raster data collections. This example uses data that's pulled from Sentinel-2 satellites. The area of interest (AreaOfInterest) specified is western [PII], and the time range (TimeRangeFilter) is January 1, 2022 to December 30, 2022.\n\nIn following code examples you use the ARN associated with Sentinel-2 raster data collection, `arn:aws:sagemaker-geospatial:us-west-2:378778860802:raster-data-collection/public/nmqj48dcu3g7ayw8`.\n\nA search_raster_data_collection API request requires two parameters:\n- `Arn`: The Amazon name resource (ARN) that corresponds to the raster data collection that you want to query.\n- `RasterDataCollectionQuery`: The RasterDataCollectionQuery parameter, which contains the area of interest as well as the desired time range."}, "line_index": 2, "location": "INPUT", "character_start_index": 210, "character_end_index": 215, "details": null}]}, {"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 17, "cell_type": "SOURCE", "scrubbed_content": "import [PII]\nfrom sagemaker import get_execution_role\nfrom sagemaker.sklearn.processing import ScriptProcessor\nfrom sagemaker.processing import ProcessingInput, ProcessingOutput\n\nregion = sagemaker.Session().boto_region_name\nrole = get_execution_role()\n\ngeospatial_image_uri = (\n    \"081189585635.dkr.ecr.us-west-2.amazonaws.com/sagemaker-geospatial-v1-0:latest\"\n)\nprocessor = ScriptProcessor(\n    command=[\"python3\"],\n    image_uri=geospatial_image_uri,\n    role=role,\n    instance_count=5,\n    instance_type=\"ml.m5.xlarge\",\n    base_job_name=\"geospatial-processing-example-ndvi\",\n)"}, "location": "INPUT", "details": {"description": "A total of 1 PII found in cell number 17", "summary_field": {"PERSON": 1}}, "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 17, "cell_type": "SOURCE", "scrubbed_content": "import [PII]\nfrom sagemaker import get_execution_role\nfrom sagemaker.sklearn.processing import ScriptProcessor\nfrom sagemaker.processing import ProcessingInput, ProcessingOutput\n\nregion = sagemaker.Session().boto_region_name\nrole = get_execution_role()\n\ngeospatial_image_uri = (\n    \"081189585635.dkr.ecr.us-west-2.amazonaws.com/sagemaker-geospatial-v1-0:latest\"\n)\nprocessor = ScriptProcessor(\n    command=[\"python3\"],\n    image_uri=geospatial_image_uri,\n    role=role,\n    instance_count=5,\n    instance_type=\"ml.m5.xlarge\",\n    base_job_name=\"geospatial-processing-example-ndvi\",\n)"}, "line_index": 0, "location": "INPUT", "character_start_index": 7, "character_end_index": 16, "details": null}]}]}, {"path": "/Users/david/Desktop/Notebooks/amazon_segemaker_examples/vector-enrichment-map-matching.ipynb", "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 5, "cell_type": "SOURCE", "scrubbed_content": "import boto3\nimport [PII]\nimport sagemaker_geospatial_map\n\nsession = boto3.Session()\nexecution_role = sagemaker.get_execution_role()\ngeospatial_client = session.client(service_name=\"sagemaker-geospatial\")"}, "location": "INPUT", "details": {"description": "A total of 1 PII found in cell number 5", "summary_field": {"PERSON": 1}}, "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 5, "cell_type": "SOURCE", "scrubbed_content": "import boto3\nimport [PII]\nimport sagemaker_geospatial_map\n\nsession = boto3.Session()\nexecution_role = sagemaker.get_execution_role()\ngeospatial_client = session.client(service_name=\"sagemaker-geospatial\")"}, "line_index": 1, "location": "INPUT", "character_start_index": 7, "character_end_index": 16, "details": null}]}, {"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 18, "cell_type": "SOURCE", "scrubbed_content": "import boto3\nimport [PII]\n\ns3_client = boto3.client(\"s3\")\n\n\ndef get_file_content_from_s3(bucket_name, object_key):\n    response = s3_client.get_object(Bucket=bucket_name, Key=object_key)\n    return response.get(\"Body\")\n\n\ns3_bucket_resource = session.resource(\"s3\").Bucket(s3_bucket)\ns3_link_data_output_key = \"\"\ns3_waypoint_data_output_key = \"\"\n\nfor s3_object in s3_bucket_resource.objects.filter(Prefix=bucket_output_prefix).all():\n    if s3_object.key.endswith(\"links.geojson\"):\n        s3_link_data_output_key = s3_object.key\n    if s3_object.key.endswith(\"waypoints.geojson\"):\n        s3_waypoint_data_output_key = s3_object.key\n\nlink_df = geopandas.read_file(get_file_content_from_s3(s3_bucket, s3_link_data_output_key))\nwaypoint_df = geopandas.read_file(get_file_content_from_s3(s3_bucket, s3_waypoint_data_output_key))"}, "location": "INPUT", "details": {"description": "A total of 1 PII found in cell number 18", "summary_field": {"LOCATION": 1}}, "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 18, "cell_type": "SOURCE", "scrubbed_content": "import boto3\nimport [PII]\n\ns3_client = boto3.client(\"s3\")\n\n\ndef get_file_content_from_s3(bucket_name, object_key):\n    response = s3_client.get_object(Bucket=bucket_name, Key=object_key)\n    return response.get(\"Body\")\n\n\ns3_bucket_resource = session.resource(\"s3\").Bucket(s3_bucket)\ns3_link_data_output_key = \"\"\ns3_waypoint_data_output_key = \"\"\n\nfor s3_object in s3_bucket_resource.objects.filter(Prefix=bucket_output_prefix).all():\n    if s3_object.key.endswith(\"links.geojson\"):\n        s3_link_data_output_key = s3_object.key\n    if s3_object.key.endswith(\"waypoints.geojson\"):\n        s3_waypoint_data_output_key = s3_object.key\n\nlink_df = geopandas.read_file(get_file_content_from_s3(s3_bucket, s3_link_data_output_key))\nwaypoint_df = geopandas.read_file(get_file_content_from_s3(s3_bucket, s3_waypoint_data_output_key))"}, "line_index": 1, "location": "INPUT", "character_start_index": 7, "character_end_index": 16, "details": null}]}]}, {"path": "/Users/david/Desktop/Notebooks/amazon_segemaker_examples/monitor_methane_ch4_emission_point_sources.ipynb", "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 7, "cell_type": "MARKDOWN", "scrubbed_content": "In this example, we'll monitor a known methane leak originating from an oil field in [PII]. This case is a standard validation scenario in remote sensing literature and is referenced, for instance, in the following [study](https://amt.copernicus.org/articles/14/2771/2021/).\n\nThe following variables define the precise location and date that we aim to monitor for emissions. Additionally, we specify a distance in meters to establish the size of a bounding box extending in each direction from the point location. Only data within this boundary will be considered for detection purposes."}, "location": "INPUT", "details": {"description": "A total of 1 PII found in cell number 7", "summary_field": {"LOCATION": 1}}, "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 7, "cell_type": "MARKDOWN", "scrubbed_content": "In this example, we'll monitor a known methane leak originating from an oil field in [PII]. This case is a standard validation scenario in remote sensing literature and is referenced, for instance, in the following [study](https://amt.copernicus.org/articles/14/2771/2021/).\n\nThe following variables define the precise location and date that we aim to monitor for emissions. Additionally, we specify a distance in meters to establish the size of a bounding box extending in each direction from the point location. Only data within this boundary will be considered for detection purposes."}, "line_index": 0, "location": "INPUT", "character_start_index": 85, "character_end_index": 100, "details": null}]}, {"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 8, "cell_type": "SOURCE", "scrubbed_content": "# coordinates and date for [PII] oil field (common reference in earth observation literature)\n# see here for details: https://doi.org/10.5194/amt-14-2771-2021\npoint_longitude = 5.9053\npoint_latitude = 31.6585\ndate_to_monitor = \"2019-11-20\"\n\n# size of bounding box in each direction around point\ndistance_offset_meters = 1500"}, "location": "INPUT", "details": {"description": "A total of 1 PII found in cell number 8", "summary_field": {"LOCATION": 1}}, "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 8, "cell_type": "SOURCE", "scrubbed_content": "# coordinates and date for [PII] oil field (common reference in earth observation literature)\n# see here for details: https://doi.org/10.5194/amt-14-2771-2021\npoint_longitude = 5.9053\npoint_latitude = 31.6585\ndate_to_monitor = \"2019-11-20\"\n\n# size of bounding box in each direction around point\ndistance_offset_meters = 1500"}, "line_index": 0, "location": "INPUT", "character_start_index": 27, "character_end_index": 39, "details": null}]}]}, {"path": "/Users/david/Desktop/Notebooks/amazon_segemaker_examples/mount_shasta_glacier_melt_monitoring.ipynb", "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 3, "cell_type": "MARKDOWN", "scrubbed_content": "**Contents**\n* [Setup SageMaker geospatial capabilities](#1)\n* [Query Sentinel-2 Data](#2)\n* [Start an Earth Observation Job (EOJ) to identify the land cover types in the area of [PII])\n* [Visualize EOJ inputs and outputs in FourSquare Studio](#4)\n* [Extract the land cover segmentation results](#5)\n* [Measure snow coverage of [PII])\n* [Query Landsat 8 data](#7)\n* [Analyze the relationship between snow coverage and surface temperature](#8)\n\n"}, "location": "INPUT", "details": {"description": "A total of 2 PII found in cell number 3", "summary_field": {"LOCATION": 2}}, "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 3, "cell_type": "MARKDOWN", "scrubbed_content": "**Contents**\n* [Setup SageMaker geospatial capabilities](#1)\n* [Query Sentinel-2 Data](#2)\n* [Start an Earth Observation Job (EOJ) to identify the land cover types in the area of [PII])\n* [Visualize EOJ inputs and outputs in FourSquare Studio](#4)\n* [Extract the land cover segmentation results](#5)\n* [Measure snow coverage of [PII])\n* [Query Landsat 8 data](#7)\n* [Analyze the relationship between snow coverage and surface temperature](#8)\n\n"}, "line_index": 3, "location": "INPUT", "character_start_index": 88, "character_end_index": 104, "details": null}, {"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 3, "cell_type": "MARKDOWN", "scrubbed_content": "**Contents**\n* [Setup SageMaker geospatial capabilities](#1)\n* [Query Sentinel-2 Data](#2)\n* [Start an Earth Observation Job (EOJ) to identify the land cover types in the area of [PII])\n* [Visualize EOJ inputs and outputs in FourSquare Studio](#4)\n* [Extract the land cover segmentation results](#5)\n* [Measure snow coverage of [PII])\n* [Query Landsat 8 data](#7)\n* [Analyze the relationship between snow coverage and surface temperature](#8)\n\n"}, "line_index": 6, "location": "INPUT", "character_start_index": 28, "character_end_index": 44, "details": null}]}, {"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 5, "cell_type": "SOURCE", "scrubbed_content": "import boto3\nimport [PII]\nimport sagemaker_geospatial_map\n\nsession = boto3.Session()\nexecution_role = sagemaker.get_execution_role()\nsg_client = session.client(service_name=\"sagemaker-geospatial\")"}, "location": "INPUT", "details": {"description": "A total of 1 PII found in cell number 5", "summary_field": {"PERSON": 1}}, "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 5, "cell_type": "SOURCE", "scrubbed_content": "import boto3\nimport [PII]\nimport sagemaker_geospatial_map\n\nsession = boto3.Session()\nexecution_role = sagemaker.get_execution_role()\nsg_client = session.client(service_name=\"sagemaker-geospatial\")"}, "line_index": 1, "location": "INPUT", "character_start_index": 7, "character_end_index": 16, "details": null}]}, {"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 6, "cell_type": "MARKDOWN", "scrubbed_content": "<a id='2'></a>\n\n## Query Sentinel-2 data\n\nRetrieve Sentinel-2 data over the [PII] area by specifying the data location, time range, and property filters in the query."}, "location": "INPUT", "details": {"description": "A total of 1 PII found in cell number 6", "summary_field": {"LOCATION": 1}}, "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 6, "cell_type": "MARKDOWN", "scrubbed_content": "<a id='2'></a>\n\n## Query Sentinel-2 data\n\nRetrieve Sentinel-2 data over the [PII] area by specifying the data location, time range, and property filters in the query."}, "line_index": 4, "location": "INPUT", "character_start_index": 34, "character_end_index": 46, "details": null}]}, {"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 8, "cell_type": "MARKDOWN", "scrubbed_content": "<a id='3'></a>\n## Start an Earth Observation Job (EOJ) to identify the land cover types in the area of [PII]"}, "location": "INPUT", "details": {"description": "A total of 1 PII found in cell number 8", "summary_field": {"LOCATION": 1}}, "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 8, "cell_type": "MARKDOWN", "scrubbed_content": "<a id='3'></a>\n## Start an Earth Observation Job (EOJ) to identify the land cover types in the area of [PII]"}, "line_index": 1, "location": "INPUT", "character_start_index": 88, "character_end_index": 100, "details": null}]}, {"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 14, "cell_type": "SOURCE", "scrubbed_content": "# Visualize AOI\nconfig = {\"label\": \"[PII]\"}\naoi_layer = map.visualize_eoj_aoi(Arn=eoj_arn, config=config)"}, "location": "INPUT", "details": {"description": "A total of 1 PII found in cell number 14", "summary_field": {"LOCATION": 1}}, "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 14, "cell_type": "SOURCE", "scrubbed_content": "# Visualize AOI\nconfig = {\"label\": \"[PII]\"}\naoi_layer = map.visualize_eoj_aoi(Arn=eoj_arn, config=config)"}, "line_index": 1, "location": "INPUT", "character_start_index": 20, "character_end_index": 36, "details": null}]}, {"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 24, "cell_type": "SOURCE", "scrubbed_content": "overlay_dir = \"./masks/mont_shasta_overlay\"\nos.makedirs(overlay_dir, exist_ok=True)\nsnow_areas = []\nmask_dates = []\n\nfor image_file, mask_file in zip(image_files, mask_files):\n    image_id = image_file.split(\"/\")[-1].split(\"_TCI\")[0]\n    mask_id = mask_file.split(\"/\")[-1].split(\".tif\")[0]\n    mask_date = mask_id.split(\"_\")[2]\n    mask_dates.append(mask_date)\n    assert image_id == mask_id\n    image = tifffile.imread(image_file)\n    image_ds = cv2.resize(image, (1830, 1830), interpolation=cv2.INTER_LINEAR)\n    snow_mount_img = image_ds[100:400, 1000:1250]  # a crop of the [PII] area\n    mask = tifffile.imread(mask_file)\n    snow_mask = np.isin(mask, [11]).astype(np.uint8)  # extract snow mask\n    snow_mount_mask = snow_mask[100:400, 1000:1250]\n    snow_area = snow_mount_mask.sum() * 60 * 60 / (1000 * 1000)  # calculate the snow cover area\n    snow_areas.append(snow_area)\n    red_img = np.zeros(snow_mount_img.shape, snow_mount_img.dtype)\n    red_img[:, :] = (255, 0, 0)\n    red_mask = cv2.bitwise_and(red_img, red_img, mask=snow_mount_mask)\n    overlay_img = cv2.addWeighted(red_mask, 1, snow_mount_img, 1, 0, snow_mount_img)\n    cv2.putText(\n        overlay_img,\n        f\"{mask_date}\",\n        (0, 20),\n        cv2.FONT_HERSHEY_SIMPLEX,\n        0.5,\n        (255, 0, 0),\n        1,\n        cv2.LINE_AA,\n    )\n    cv2.putText(\n        overlay_img,\n        f\"{snow_area} [sq km]\",\n        (0, 40),\n        cv2.FONT_HERSHEY_SIMPLEX,\n        0.5,\n        (255, 0, 0),\n        1,\n        cv2.LINE_AA,\n    )\n    overlay_file = overlay_dir + \"/\" + mask_date + \".png\"\n    cv2.imwrite(overlay_file, cv2.cvtColor(overlay_img, cv2.COLOR_RGB2BGR))"}, "location": "INPUT", "details": {"description": "A total of 1 PII found in cell number 24", "summary_field": {"LOCATION": 1}}, "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 24, "cell_type": "SOURCE", "scrubbed_content": "overlay_dir = \"./masks/mont_shasta_overlay\"\nos.makedirs(overlay_dir, exist_ok=True)\nsnow_areas = []\nmask_dates = []\n\nfor image_file, mask_file in zip(image_files, mask_files):\n    image_id = image_file.split(\"/\")[-1].split(\"_TCI\")[0]\n    mask_id = mask_file.split(\"/\")[-1].split(\".tif\")[0]\n    mask_date = mask_id.split(\"_\")[2]\n    mask_dates.append(mask_date)\n    assert image_id == mask_id\n    image = tifffile.imread(image_file)\n    image_ds = cv2.resize(image, (1830, 1830), interpolation=cv2.INTER_LINEAR)\n    snow_mount_img = image_ds[100:400, 1000:1250]  # a crop of the [PII] area\n    mask = tifffile.imread(mask_file)\n    snow_mask = np.isin(mask, [11]).astype(np.uint8)  # extract snow mask\n    snow_mount_mask = snow_mask[100:400, 1000:1250]\n    snow_area = snow_mount_mask.sum() * 60 * 60 / (1000 * 1000)  # calculate the snow cover area\n    snow_areas.append(snow_area)\n    red_img = np.zeros(snow_mount_img.shape, snow_mount_img.dtype)\n    red_img[:, :] = (255, 0, 0)\n    red_mask = cv2.bitwise_and(red_img, red_img, mask=snow_mount_mask)\n    overlay_img = cv2.addWeighted(red_mask, 1, snow_mount_img, 1, 0, snow_mount_img)\n    cv2.putText(\n        overlay_img,\n        f\"{mask_date}\",\n        (0, 20),\n        cv2.FONT_HERSHEY_SIMPLEX,\n        0.5,\n        (255, 0, 0),\n        1,\n        cv2.LINE_AA,\n    )\n    cv2.putText(\n        overlay_img,\n        f\"{snow_area} [sq km]\",\n        (0, 40),\n        cv2.FONT_HERSHEY_SIMPLEX,\n        0.5,\n        (255, 0, 0),\n        1,\n        cv2.LINE_AA,\n    )\n    overlay_file = overlay_dir + \"/\" + mask_date + \".png\"\n    cv2.imwrite(overlay_file, cv2.cvtColor(overlay_img, cv2.COLOR_RGB2BGR))"}, "line_index": 13, "location": "INPUT", "character_start_index": 67, "character_end_index": 79, "details": null}]}, {"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 34, "cell_type": "SOURCE", "scrubbed_content": "mont_lsts = []\nlst_dates = []\n\nfor lst_file in lst_files:\n    lst_date = lst_file.split(\"_\")[5]\n    lst_dates.append(lst_date)\n    lst = tifffile.imread(lst_file)\n    mont_lst = lst[5000:5500, 3900:4400]  # bounding box for [PII]\n    mont_lst_c = (np.mean(mont_lst) * 0.00341802 + 149) - 273  # surface temperature in Celsius\n    mont_lsts.append(mont_lst_c)"}, "location": "INPUT", "details": {"description": "A total of 1 PII found in cell number 34", "summary_field": {"LOCATION": 1}}, "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 34, "cell_type": "SOURCE", "scrubbed_content": "mont_lsts = []\nlst_dates = []\n\nfor lst_file in lst_files:\n    lst_date = lst_file.split(\"_\")[5]\n    lst_dates.append(lst_date)\n    lst = tifffile.imread(lst_file)\n    mont_lst = lst[5000:5500, 3900:4400]  # bounding box for [PII]\n    mont_lst_c = (np.mean(mont_lst) * 0.00341802 + 149) - 273  # surface temperature in Celsius\n    mont_lsts.append(mont_lst_c)"}, "line_index": 7, "location": "INPUT", "character_start_index": 61, "character_end_index": 73, "details": null}]}]}, {"path": "/Users/david/Desktop/Notebooks/amazon_segemaker_examples/lake_mead_drought_monitoring.ipynb", "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 0, "cell_type": "MARKDOWN", "scrubbed_content": "# Monitoring [PII] Drought with SageMaker Geospatial Capabilities\n"}, "location": "INPUT", "details": {"description": "A total of 1 PII found in cell number 0", "summary_field": {"LOCATION": 1}}, "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 0, "cell_type": "MARKDOWN", "scrubbed_content": "# Monitoring [PII] Drought with SageMaker Geospatial Capabilities\n"}, "line_index": 0, "location": "INPUT", "character_start_index": 13, "character_end_index": 17, "details": null}]}, {"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 3, "cell_type": "MARKDOWN", "scrubbed_content": "**Contents**\n* [Setup SageMaker geospatial capabilities](#1)\n* [Query and access Data](#2)\n* [Start an Earth Observation Job (EOJ) to identify the land cover types in the area of [PII])\n* [Visualize EOJ inputs and outputs in FourSquare Studio](#4)\n* [Extract the land cover segmentation results](#5)\n* [Measure [PII] surface area](#6)\n\n"}, "location": "INPUT", "details": {"description": "A total of 2 PII found in cell number 3", "summary_field": {"LOCATION": 2}}, "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 3, "cell_type": "MARKDOWN", "scrubbed_content": "**Contents**\n* [Setup SageMaker geospatial capabilities](#1)\n* [Query and access Data](#2)\n* [Start an Earth Observation Job (EOJ) to identify the land cover types in the area of [PII])\n* [Visualize EOJ inputs and outputs in FourSquare Studio](#4)\n* [Extract the land cover segmentation results](#5)\n* [Measure [PII] surface area](#6)\n\n"}, "line_index": 3, "location": "INPUT", "character_start_index": 88, "character_end_index": 101, "details": null}, {"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 3, "cell_type": "MARKDOWN", "scrubbed_content": "**Contents**\n* [Setup SageMaker geospatial capabilities](#1)\n* [Query and access Data](#2)\n* [Start an Earth Observation Job (EOJ) to identify the land cover types in the area of [PII])\n* [Visualize EOJ inputs and outputs in FourSquare Studio](#4)\n* [Extract the land cover segmentation results](#5)\n* [Measure [PII] surface area](#6)\n\n"}, "line_index": 6, "location": "INPUT", "character_start_index": 11, "character_end_index": 20, "details": null}]}, {"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 5, "cell_type": "SOURCE", "scrubbed_content": "import boto3\nimport [PII]\nimport sagemaker_geospatial_map\n\nsession = boto3.Session()\nexecution_role = sagemaker.get_execution_role()\nsg_client = session.client(service_name=\"sagemaker-geospatial\")"}, "location": "INPUT", "details": {"description": "A total of 1 PII found in cell number 5", "summary_field": {"PERSON": 1}}, "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 5, "cell_type": "SOURCE", "scrubbed_content": "import boto3\nimport [PII]\nimport sagemaker_geospatial_map\n\nsession = boto3.Session()\nexecution_role = sagemaker.get_execution_role()\nsg_client = session.client(service_name=\"sagemaker-geospatial\")"}, "line_index": 1, "location": "INPUT", "character_start_index": 7, "character_end_index": 16, "details": null}]}, {"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 10, "cell_type": "MARKDOWN", "scrubbed_content": "<a id='3'></a>\n## Start an Earth Observation Job (EOJ) to identify the land cover types in the area of [PII]"}, "location": "INPUT", "details": {"description": "A total of 1 PII found in cell number 10", "summary_field": {"LOCATION": 1}}, "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 10, "cell_type": "MARKDOWN", "scrubbed_content": "<a id='3'></a>\n## Start an Earth Observation Job (EOJ) to identify the land cover types in the area of [PII]"}, "line_index": 1, "location": "INPUT", "character_start_index": 88, "character_end_index": 97, "details": null}]}, {"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 24, "cell_type": "MARKDOWN", "scrubbed_content": "<a id='6'></a>\n## Measure [PII] surface area"}, "location": "INPUT", "details": {"description": "A total of 1 PII found in cell number 24", "summary_field": {"LOCATION": 1}}, "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 24, "cell_type": "MARKDOWN", "scrubbed_content": "<a id='6'></a>\n## Measure [PII] surface area"}, "line_index": 1, "location": "INPUT", "character_start_index": 11, "character_end_index": 20, "details": null}]}]}, {"path": "/Users/david/Desktop/Notebooks/amazon_segemaker_examples/dixie-wildfire-damage-assessment.ipynb", "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 2, "cell_type": "MARKDOWN", "scrubbed_content": "This notebook demonstrates how to use Amazon SageMaker geospatial capabilities to assess wildfire damages using multi-temporal Sentinel-2 satellite data.\n\nThe area of interest for this example is located in [PII], from a region which was affected by the [Dixie Wildfire](https://en.wikipedia.org/wiki/Dixie_Fire) in 2021.\n\nThe workflow is as follows:\n\n- Step 1: [Import SageMaker geospatial capabilities SDK](#Import-SageMaker-geospatial-capabilities-SDK)\n- Step 2: [Inspect the area of interest](#Inspect-the-area-of-interest)\n- Step 3: [Create an Earth Observation Job (EOJ) to perform landcover segmentation](#Create-an-Earth-Observation-Job-to-perform-landcover-segmentation)\n- Step 4: [Visualize EOJ results in Amazon SageMaker geospatial Map SDK](#Visualize-EOJ-results-in-Amazon-SageMaker-geospatial-Map-SDK)\n- Step 5: [Export EOJ output to S3](#Export-EOJ-output-to-S3)\n- Step 6: [Quantify loss of vegetation and wildfire impact area](#Quantify-loss-of-vegetation-and-wildfire-impact-area)"}, "location": "INPUT", "details": {"description": "A total of 1 PII found in cell number 2", "summary_field": {"LOCATION": 1}}, "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 2, "cell_type": "MARKDOWN", "scrubbed_content": "This notebook demonstrates how to use Amazon SageMaker geospatial capabilities to assess wildfire damages using multi-temporal Sentinel-2 satellite data.\n\nThe area of interest for this example is located in [PII], from a region which was affected by the [Dixie Wildfire](https://en.wikipedia.org/wiki/Dixie_Fire) in 2021.\n\nThe workflow is as follows:\n\n- Step 1: [Import SageMaker geospatial capabilities SDK](#Import-SageMaker-geospatial-capabilities-SDK)\n- Step 2: [Inspect the area of interest](#Inspect-the-area-of-interest)\n- Step 3: [Create an Earth Observation Job (EOJ) to perform landcover segmentation](#Create-an-Earth-Observation-Job-to-perform-landcover-segmentation)\n- Step 4: [Visualize EOJ results in Amazon SageMaker geospatial Map SDK](#Visualize-EOJ-results-in-Amazon-SageMaker-geospatial-Map-SDK)\n- Step 5: [Export EOJ output to S3](#Export-EOJ-output-to-S3)\n- Step 6: [Quantify loss of vegetation and wildfire impact area](#Quantify-loss-of-vegetation-and-wildfire-impact-area)"}, "line_index": 2, "location": "INPUT", "character_start_index": 52, "character_end_index": 71, "details": null}]}, {"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 5, "cell_type": "SOURCE", "scrubbed_content": "import boto3\nimport [PII]\nimport sagemaker_geospatial_map\n\nsession = boto3.Session()\nexecution_role = sagemaker.get_execution_role()\ngeospatial_client = session.client(service_name=\"sagemaker-geospatial\")"}, "location": "INPUT", "details": {"description": "A total of 1 PII found in cell number 5", "summary_field": {"PERSON": 1}}, "issues": [{"code": "PII_FOUND", "severity": "HIGH", "cell": {"cell_index": 5, "cell_type": "SOURCE", "scrubbed_content": "import boto3\nimport [PII]\nimport sagemaker_geospatial_map\n\nsession = boto3.Session()\nexecution_role = sagemaker.get_execution_role()\ngeospatial_client = session.client(service_name=\"sagemaker-geospatial\")"}, "line_index": 1, "location": "INPUT", "character_start_index": 7, "character_end_index": 16, "details": null}]}]}]}
