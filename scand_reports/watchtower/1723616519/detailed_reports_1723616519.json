{
       "/Users/david/Desktop/Notebooks/amazon_segemaker_examples/vector-enrichment-reverse-geocoding.ipynb": {
              "file_name": "/Users/david/Desktop/Notebooks/amazon_segemaker_examples/vector-enrichment-reverse-geocoding.ipynb",
              "scanning_reports": [
                     {
                            "tool": "Detect-Secret",
                            "output_log": "{'version': '1.4.0', 'plugins_used': [{'name': 'ArtifactoryDetector'}, {'name': 'AWSKeyDetector'}, {'name': 'AzureStorageKeyDetector'}, {'name': 'Base64HighEntropyString', 'limit': 4.5}, {'name': 'BasicAuthDetector'}, {'name': 'CloudantDetector'}, {'name': 'DiscordBotTokenDetector'}, {'name': 'GitHubTokenDetector'}, {'name': 'HexHighEntropyString', 'limit': 3.0}, {'name': 'IbmCloudIamDetector'}, {'name': 'IbmCosHmacDetector'}, {'name': 'JwtTokenDetector'}, {'name': 'KeywordDetector', 'keyword_exclude': ''}, {'name': 'MailchimpDetector'}, {'name': 'NpmDetector'}, {'name': 'PrivateKeyDetector'}, {'name': 'SendGridDetector'}, {'name': 'SlackDetector'}, {'name': 'SoftlayerDetector'}, {'name': 'SquareOAuthDetector'}, {'name': 'StripeDetector'}, {'name': 'TwilioKeyDetector'}], 'filters_used': [{'path': 'detect_secrets.filters.allowlist.is_line_allowlisted'}, {'path': 'detect_secrets.filters.common.is_ignored_due_to_verification_policies', 'min_level': 2}, {'path': 'detect_secrets.filters.heuristic.is_indirect_reference'}, {'path': 'detect_secrets.filters.heuristic.is_likely_id_string'}, {'path': 'detect_secrets.filters.heuristic.is_lock_file'}, {'path': 'detect_secrets.filters.heuristic.is_not_alphanumeric_string'}, {'path': 'detect_secrets.filters.heuristic.is_potential_uuid'}, {'path': 'detect_secrets.filters.heuristic.is_prefixed_with_dollar_sign'}, {'path': 'detect_secrets.filters.heuristic.is_sequential_string'}, {'path': 'detect_secrets.filters.heuristic.is_swagger_file'}, {'path': 'detect_secrets.filters.heuristic.is_templated_secret'}], 'results': {}, 'generated_at': '2024-08-14T06:22:01Z'}"
                     },
                     {
                            "tool": "Whisper",
                            "output_log": "[]"
                     },
                     {
                            "tool": "Presidio-Analyzer",
                            "output_log": "Type: LOCATION, Line: 10, Content: '# ![This us-west-2 badge failed to load. Check your device's internet connectivity, otherwise the service is currently unavailable](https://prod.us-west-2.tcx-beacon.docs.aws.dev/sagemaker-nb/us-west-2/sagemaker-geospatial|vector-enrichment-reverse-geocoding|vector-enrichment-reverse-geocoding.ipynb)', Start: 258, End: 260, Score: 0.85\nType: PERSON, Line: 24, Content: '# - Step 5: [Visualize enriched data set in Amazon SageMaker geospatial Map SDK](#Visualize-enriched-data-set-in-Amazon-SageMaker-geospatial-Map-SDK)', Start: 1676, End: 1691, Score: 0.85\nType: LOCATION, Line: 70, Content: '# The California Housing dataset contains information from the 1990 California census. We will use the dataset to demonstrate how to resolve the latitude and longitude into human readable address information. The dataset contains the following columns:', Start: 3165, End: 3175, Score: 0.85\nType: PERSON, Line: 83, Content: '# > Pace, R. Kelley, and Ronald Barry. \"Sparse spatial autoregressions.\" Statistics & Probability Letters 33.3 (1997): 291-297.', Start: 3688, End: 3697, Score: 0.85\nType: PERSON, Line: 83, Content: '# > Pace, R. Kelley, and Ronald Barry. \"Sparse spatial autoregressions.\" Statistics & Probability Letters 33.3 (1997): 291-297.', Start: 3703, End: 3715, Score: 0.85\nType: LOCATION, Line: 223, Content: 'time.sleep(15)', Start: 7601, End: 7614, Score: 0.85"
                     },
                     {
                            "tool": "Safety",
                            "output_log": ""
                     }
              ]
       },
       "/Users/david/Desktop/Notebooks/amazon_segemaker_examples/geospatial-processing-ndvi-intro.ipynb": {
              "file_name": "/Users/david/Desktop/Notebooks/amazon_segemaker_examples/geospatial-processing-ndvi-intro.ipynb",
              "scanning_reports": [
                     {
                            "tool": "Detect-Secret",
                            "output_log": "{'version': '1.4.0', 'plugins_used': [{'name': 'ArtifactoryDetector'}, {'name': 'AWSKeyDetector'}, {'name': 'AzureStorageKeyDetector'}, {'name': 'Base64HighEntropyString', 'limit': 4.5}, {'name': 'BasicAuthDetector'}, {'name': 'CloudantDetector'}, {'name': 'DiscordBotTokenDetector'}, {'name': 'GitHubTokenDetector'}, {'name': 'HexHighEntropyString', 'limit': 3.0}, {'name': 'IbmCloudIamDetector'}, {'name': 'IbmCosHmacDetector'}, {'name': 'JwtTokenDetector'}, {'name': 'KeywordDetector', 'keyword_exclude': ''}, {'name': 'MailchimpDetector'}, {'name': 'NpmDetector'}, {'name': 'PrivateKeyDetector'}, {'name': 'SendGridDetector'}, {'name': 'SlackDetector'}, {'name': 'SoftlayerDetector'}, {'name': 'SquareOAuthDetector'}, {'name': 'StripeDetector'}, {'name': 'TwilioKeyDetector'}], 'filters_used': [{'path': 'detect_secrets.filters.allowlist.is_line_allowlisted'}, {'path': 'detect_secrets.filters.common.is_ignored_due_to_verification_policies', 'min_level': 2}, {'path': 'detect_secrets.filters.heuristic.is_indirect_reference'}, {'path': 'detect_secrets.filters.heuristic.is_likely_id_string'}, {'path': 'detect_secrets.filters.heuristic.is_lock_file'}, {'path': 'detect_secrets.filters.heuristic.is_not_alphanumeric_string'}, {'path': 'detect_secrets.filters.heuristic.is_potential_uuid'}, {'path': 'detect_secrets.filters.heuristic.is_prefixed_with_dollar_sign'}, {'path': 'detect_secrets.filters.heuristic.is_sequential_string'}, {'path': 'detect_secrets.filters.heuristic.is_swagger_file'}, {'path': 'detect_secrets.filters.heuristic.is_templated_secret'}], 'results': {}, 'generated_at': '2024-08-14T06:22:06Z'}"
                     },
                     {
                            "tool": "Whisper",
                            "output_log": "[]"
                     },
                     {
                            "tool": "Presidio-Analyzer",
                            "output_log": "Type: LOCATION, Line: 10, Content: '# ![This us-west-2 badge failed to load. Check your device's internet connectivity, otherwise the service is currently unavailable](https://h75twx4l60.execute-api.us-west-2.amazonaws.com/sagemaker-nb/us-west-2/sagemaker-geospatial|processing-geospatial-ndvi|geospatial-processing-ndvi-intro.ipynb)', Start: 258, End: 260, Score: 0.85\nType: LOCATION, Line: 76, Content: '# With `search_raster_data_collection` you can query supported raster data collections. This example uses data that's pulled from Sentinel-2 satellites. The area of interest (AreaOfInterest) specified is western Idaho, and the time range (TimeRangeFilter) is January 1, 2022 to December 30, 2022.', Start: 3533, End: 3538, Score: 0.85\nType: PERSON, Line: 76, Content: '# With `search_raster_data_collection` you can query supported raster data collections. This example uses data that's pulled from Sentinel-2 satellites. The area of interest (AreaOfInterest) specified is western Idaho, and the time range (TimeRangeFilter) is January 1, 2022 to December 30, 2022.', Start: 3560, End: 3575, Score: 0.85\nType: PERSON, Line: 105, Content: '\"TimeRangeFilter\": {', Start: 4973, End: 4988, Score: 0.85\nType: PERSON, Line: 126, Content: 'next_token = search_result.get(\"NextToken\")', Start: 5516, End: 5544, Score: 0.85\nType: PERSON, Line: 152, Content: 'manifest.append(s2_item_to_relative_metadata_url(item))', Start: 6383, End: 6436, Score: 0.85\nType: LOCATION, Line: 203, Content: 'region = sagemaker.Session().boto_region_name', Start: 9220, End: 9229, Score: 0.85\nType: PERSON, Line: 287, Content: 'maxx=540000,', Start: 11201, End: 11212, Score: 0.85"
                     },
                     {
                            "tool": "Safety",
                            "output_log": ""
                     }
              ]
       },
       "/Users/david/Desktop/Notebooks/amazon_segemaker_examples/vector-enrichment-map-matching.ipynb": {
              "file_name": "/Users/david/Desktop/Notebooks/amazon_segemaker_examples/vector-enrichment-map-matching.ipynb",
              "scanning_reports": [
                     {
                            "tool": "Detect-Secret",
                            "output_log": "{'version': '1.4.0', 'plugins_used': [{'name': 'ArtifactoryDetector'}, {'name': 'AWSKeyDetector'}, {'name': 'AzureStorageKeyDetector'}, {'name': 'Base64HighEntropyString', 'limit': 4.5}, {'name': 'BasicAuthDetector'}, {'name': 'CloudantDetector'}, {'name': 'DiscordBotTokenDetector'}, {'name': 'GitHubTokenDetector'}, {'name': 'HexHighEntropyString', 'limit': 3.0}, {'name': 'IbmCloudIamDetector'}, {'name': 'IbmCosHmacDetector'}, {'name': 'JwtTokenDetector'}, {'name': 'KeywordDetector', 'keyword_exclude': ''}, {'name': 'MailchimpDetector'}, {'name': 'NpmDetector'}, {'name': 'PrivateKeyDetector'}, {'name': 'SendGridDetector'}, {'name': 'SlackDetector'}, {'name': 'SoftlayerDetector'}, {'name': 'SquareOAuthDetector'}, {'name': 'StripeDetector'}, {'name': 'TwilioKeyDetector'}], 'filters_used': [{'path': 'detect_secrets.filters.allowlist.is_line_allowlisted'}, {'path': 'detect_secrets.filters.common.is_ignored_due_to_verification_policies', 'min_level': 2}, {'path': 'detect_secrets.filters.heuristic.is_indirect_reference'}, {'path': 'detect_secrets.filters.heuristic.is_likely_id_string'}, {'path': 'detect_secrets.filters.heuristic.is_lock_file'}, {'path': 'detect_secrets.filters.heuristic.is_not_alphanumeric_string'}, {'path': 'detect_secrets.filters.heuristic.is_potential_uuid'}, {'path': 'detect_secrets.filters.heuristic.is_prefixed_with_dollar_sign'}, {'path': 'detect_secrets.filters.heuristic.is_sequential_string'}, {'path': 'detect_secrets.filters.heuristic.is_swagger_file'}, {'path': 'detect_secrets.filters.heuristic.is_templated_secret'}], 'results': {}, 'generated_at': '2024-08-14T06:22:10Z'}"
                     },
                     {
                            "tool": "Whisper",
                            "output_log": "[]"
                     },
                     {
                            "tool": "Presidio-Analyzer",
                            "output_log": "Type: LOCATION, Line: 10, Content: '# ![This us-west-2 badge failed to load. Check your device's internet connectivity, otherwise the service is currently unavailable](https://prod.us-west-2.tcx-beacon.docs.aws.dev/sagemaker-nb/us-west-2/sagemaker-geospatial|vector-enrichment-map-matching|vector-enrichment-map-matching.ipynb)', Start: 253, End: 255, Score: 0.85\nType: PERSON, Line: 24, Content: '# - Step 5: [Visualize predicted routes in Amazon SageMaker geospatial Map SDK](#Visualize-predicted-routes-in-Amazon-SageMaker-geospatial-Map-SDK)', Start: 1581, End: 1596, Score: 0.85\nType: LOCATION, Line: 93, Content: 'response = s3_client.upload_file(\"./data/example_gps_traces.csv\", s3_bucket, map_matching_input_object_key)', Start: 3799, End: 3828, Score: 0.85\nType: LOCATION, Line: 177, Content: 'time.sleep(15)', Start: 6287, End: 6300, Score: 0.85\nType: PERSON, Line: 182, Content: '# The following cells will create an interactive map with the Amazon SageMaker geospatial Map SDK. The output data of the VEJ, the predicted routes, will be loaded from S3 into a geopandas dataframe and then visualized in the embedded map.', Start: 6557, End: 6566, Score: 0.85\nType: PERSON, Line: 213, Content: 's3_bucket_resource = session.resource(\"s3\").Bucket(s3_bucket)', Start: 7070, End: 7088, Score: 0.85"
                     },
                     {
                            "tool": "Safety",
                            "output_log": ""
                     }
              ]
       },
       "/Users/david/Desktop/Notebooks/amazon_segemaker_examples/monitor_methane_ch4_emission_point_sources.ipynb": {
              "file_name": "/Users/david/Desktop/Notebooks/amazon_segemaker_examples/monitor_methane_ch4_emission_point_sources.ipynb",
              "scanning_reports": [
                     {
                            "tool": "Detect-Secret",
                            "output_log": "{'version': '1.4.0', 'plugins_used': [{'name': 'ArtifactoryDetector'}, {'name': 'AWSKeyDetector'}, {'name': 'AzureStorageKeyDetector'}, {'name': 'Base64HighEntropyString', 'limit': 4.5}, {'name': 'BasicAuthDetector'}, {'name': 'CloudantDetector'}, {'name': 'DiscordBotTokenDetector'}, {'name': 'GitHubTokenDetector'}, {'name': 'HexHighEntropyString', 'limit': 3.0}, {'name': 'IbmCloudIamDetector'}, {'name': 'IbmCosHmacDetector'}, {'name': 'JwtTokenDetector'}, {'name': 'KeywordDetector', 'keyword_exclude': ''}, {'name': 'MailchimpDetector'}, {'name': 'NpmDetector'}, {'name': 'PrivateKeyDetector'}, {'name': 'SendGridDetector'}, {'name': 'SlackDetector'}, {'name': 'SoftlayerDetector'}, {'name': 'SquareOAuthDetector'}, {'name': 'StripeDetector'}, {'name': 'TwilioKeyDetector'}], 'filters_used': [{'path': 'detect_secrets.filters.allowlist.is_line_allowlisted'}, {'path': 'detect_secrets.filters.common.is_ignored_due_to_verification_policies', 'min_level': 2}, {'path': 'detect_secrets.filters.heuristic.is_indirect_reference'}, {'path': 'detect_secrets.filters.heuristic.is_likely_id_string'}, {'path': 'detect_secrets.filters.heuristic.is_lock_file'}, {'path': 'detect_secrets.filters.heuristic.is_not_alphanumeric_string'}, {'path': 'detect_secrets.filters.heuristic.is_potential_uuid'}, {'path': 'detect_secrets.filters.heuristic.is_prefixed_with_dollar_sign'}, {'path': 'detect_secrets.filters.heuristic.is_sequential_string'}, {'path': 'detect_secrets.filters.heuristic.is_swagger_file'}, {'path': 'detect_secrets.filters.heuristic.is_templated_secret'}], 'results': {}, 'generated_at': '2024-08-14T06:22:14Z'}"
                     },
                     {
                            "tool": "Whisper",
                            "output_log": "[]"
                     },
                     {
                            "tool": "Presidio-Analyzer",
                            "output_log": "Type: LOCATION, Line: 10, Content: '# ![This us-west-2 badge failed to load. Check your device's internet connectivity, otherwise the service is currently unavailable](https://prod.us-west-2.tcx-beacon.docs.aws.dev/sagemaker-nb/us-west-2/sagemaker-geospatial|methane-emission-monitoring|monitor_methane_ch4_emission_point_sources.ipynb)', Start: 300, End: 302, Score: 0.85\nType: PERSON, Line: 155, Content: '\"Arn\": \"arn:aws:sagemaker-geospatial:us-west-2:378778860802:raster-data-collection/public/nmqj48dcu3g7ayw8\",  # reference to Sentinel 2 L2A data product', Start: 7436, End: 7439, Score: 0.85\nType: PERSON, Line: 164, Content: '\"TimeRangeFilter\": {', Start: 7897, End: 7912, Score: 0.85\nType: PERSON, Line: 166, Content: '\"EndTime\": \"{}T23:59:59Z\".format(as_iso_date(target_date)),', Start: 8012, End: 8019, Score: 0.85\nType: PERSON, Line: 176, Content: 's2_items.append(item)', Start: 8311, End: 8331, Score: 0.85\nType: LOCATION, Line: 177, Content: 'next_token = search_result.get(\"NextToken\")', Start: 8341, End: 8351, Score: 0.85\nType: PERSON, Line: 177, Content: 'next_token = search_result.get(\"NextToken\")', Start: 8354, End: 8382, Score: 0.85\nType: PERSON, Line: 178, Content: 'search_params[\"NextToken\"] = next_token', Start: 8393, End: 8417, Score: 0.85\nType: PERSON, Line: 186, Content: 'sentinel2_items = get_sentinel2_meta_data(date_to_monitor, aoi_geometry)', Start: 8585, End: 8597, Score: 0.85\nType: PERSON, Line: 263, Content: 'aoi_geometry = bbox_around_point(lon, lat, distance_offset, output_projection)', Start: 11595, End: 11598, Score: 0.85\nType: PERSON, Line: 283, Content: 'img_arr = band.to_numpy()', Start: 12346, End: 12353, Score: 0.85\nType: PERSON, Line: 284, Content: 'normalized = img_arr / np.amax(img_arr)', Start: 12403, End: 12418, Score: 0.85\nType: PERSON, Line: 358, Content: 'local_file_path = local_file_fn(local_dir, s3_obj_url)', Start: 15333, End: 15358, Score: 0.85\nType: PERSON, Line: 401, Content: 'local_file_fn=lambda local_dir, s3_obj_url: os.path.join(', Start: 16757, End: 16769, Score: 0.85\nType: PERSON, Line: 410, Content: 's2_cog_prefix = s2_tile_id_to_cog_path(s2_tile_id)', Start: 16979, End: 16992, Score: 0.85\nType: PERSON, Line: 413, Content: '# no interpolation needed, as long as target band and scl mask have identical spatial resolution', Start: 17177, End: 17180, Score: 0.85\nType: LOCATION, Line: 429, Content: 'lon, lat, date_to_monitor, distance_offset=1500, cloud_mask=True, day_offset=30', Start: 17702, End: 17722, Score: 0.85\nType: PERSON, Line: 438, Content: 'aoi_geometry = bbox_around_point(lon, lat, distance_offset)', Start: 18098, End: 18101, Score: 0.85\nType: PERSON, Line: 448, Content: 'date_time_obj = datetime.strptime(date_to_monitor, \"%Y-%m-%d\")', Start: 18338, End: 18351, Score: 0.85\nType: PERSON, Line: 449, Content: 'target_date = (date_time_obj + timedelta(days=day_delta)).strftime(\"%Y-%m-%d\")', Start: 18424, End: 18437, Score: 0.85\nType: LOCATION, Line: 504, Content: '# $$ \\Delta \\rho = {c^{monitor} \\rho^{monitor}_{b12} - \\rho^{monitor}_{b11} \\over \\rho^{monitor}_{b11}}-{c^{base} \\rho^{base}_{b12} - \\rho^{base}_{b11} \\over \\rho^{base}_{b11}}$$', Start: 20981, End: 21001, Score: 0.85\nType: LOCATION, Line: 563, Content: 'lon, lat, date_monitor, baseline_s2_tile_id, distance_offset=1500, cloud_mask=True', Start: 22966, End: 22986, Score: 0.85\nType: PERSON, Line: 571, Content: 'aoi_geometry = bbox_around_point(lon, lat, distance_offset)', Start: 23263, End: 23266, Score: 0.85\nType: PERSON, Line: 573, Content: 's2_meta_monitor = get_sentinel2_meta_data(date_monitor, aoi_geometry)', Start: 23346, End: 23358, Score: 0.85\nType: LOCATION, Line: 578, Content: 's2_tile_id_base, BAND_11_SWIR16, clip_geometry=aoi_geometry, cloud_mask=cloud_mask', Start: 23584, End: 23598, Score: 0.85\nType: PERSON, Line: 584, Content: 's2_tile_id_monitor, BAND_11_SWIR16, clip_geometry=aoi_geometry, cloud_mask=cloud_mask', Start: 23890, End: 23904, Score: 0.85\nType: PERSON, Line: 641, Content: 'rgb = normalize_rgb_bands(visual_bands).transpose(1, 2, 0)', Start: 26202, End: 26247, Score: 0.85\nType: LOCATION, Line: 654, Content: 'cr_masked[cr_masked > treshold_value] = np.nan', Start: 26654, End: 26660, Score: 0.85\nType: PERSON, Line: 678, Content: 'txt = f\"Location: (lon: {point_longitude}, lat: {point_latitude}); Reference Tile Id: {change_reflectance.attrs['s2_tile_id_baseline']}; Monitoring Tile Id: {change_reflectance.attrs['s2_tile_id_monitor']}; Scale: {distance_offset_meters*2}x{distance_offset_meters*2}m\"', Start: 27351, End: 27354, Score: 0.85\nType: PERSON, Line: 679, Content: '# plt.figtext(0.015, 0.25, txt, wrap=False, horizontalalignment=\"left\", fontsize=11)', Start: 27622, End: 27647, Score: 0.85\nType: PERSON, Line: 680, Content: 'plt.figtext(0.015, 0.225, txt, wrap=False, horizontalalignment=\"left\", fontsize=11)', Start: 27706, End: 27731, Score: 0.85"
                     },
                     {
                            "tool": "Safety",
                            "output_log": ""
                     }
              ]
       },
       "/Users/david/Desktop/Notebooks/amazon_segemaker_examples/mount_shasta_glacier_melt_monitoring.ipynb": {
              "file_name": "/Users/david/Desktop/Notebooks/amazon_segemaker_examples/mount_shasta_glacier_melt_monitoring.ipynb",
              "scanning_reports": [
                     {
                            "tool": "Detect-Secret",
                            "output_log": "{'version': '1.4.0', 'plugins_used': [{'name': 'ArtifactoryDetector'}, {'name': 'AWSKeyDetector'}, {'name': 'AzureStorageKeyDetector'}, {'name': 'Base64HighEntropyString', 'limit': 4.5}, {'name': 'BasicAuthDetector'}, {'name': 'CloudantDetector'}, {'name': 'DiscordBotTokenDetector'}, {'name': 'GitHubTokenDetector'}, {'name': 'HexHighEntropyString', 'limit': 3.0}, {'name': 'IbmCloudIamDetector'}, {'name': 'IbmCosHmacDetector'}, {'name': 'JwtTokenDetector'}, {'name': 'KeywordDetector', 'keyword_exclude': ''}, {'name': 'MailchimpDetector'}, {'name': 'NpmDetector'}, {'name': 'PrivateKeyDetector'}, {'name': 'SendGridDetector'}, {'name': 'SlackDetector'}, {'name': 'SoftlayerDetector'}, {'name': 'SquareOAuthDetector'}, {'name': 'StripeDetector'}, {'name': 'TwilioKeyDetector'}], 'filters_used': [{'path': 'detect_secrets.filters.allowlist.is_line_allowlisted'}, {'path': 'detect_secrets.filters.common.is_ignored_due_to_verification_policies', 'min_level': 2}, {'path': 'detect_secrets.filters.heuristic.is_indirect_reference'}, {'path': 'detect_secrets.filters.heuristic.is_likely_id_string'}, {'path': 'detect_secrets.filters.heuristic.is_lock_file'}, {'path': 'detect_secrets.filters.heuristic.is_not_alphanumeric_string'}, {'path': 'detect_secrets.filters.heuristic.is_potential_uuid'}, {'path': 'detect_secrets.filters.heuristic.is_prefixed_with_dollar_sign'}, {'path': 'detect_secrets.filters.heuristic.is_sequential_string'}, {'path': 'detect_secrets.filters.heuristic.is_swagger_file'}, {'path': 'detect_secrets.filters.heuristic.is_templated_secret'}], 'results': {}, 'generated_at': '2024-08-14T06:22:19Z'}"
                     },
                     {
                            "tool": "Whisper",
                            "output_log": "[]"
                     },
                     {
                            "tool": "Presidio-Analyzer",
                            "output_log": "Type: LOCATION, Line: 11, Content: '# ![This us-west-2 badge failed to load. Check your device's internet connectivity, otherwise the service is currently unavailable](https://prod.us-west-2.tcx-beacon.docs.aws.dev/sagemaker-nb/us-west-2/sagemaker-geospatial|mount-shasta-glacier-melting-monitoring|mount_shasta_glacier_melt_monitoring.ipynb)', Start: 280, End: 282, Score: 0.85\nType: LOCATION, Line: 46, Content: '# * [Start an Earth Observation Job (EOJ) to identify the land cover types in the area of Mount Shasta](#3)', Start: 1792, End: 1797, Score: 0.85\nType: LOCATION, Line: 49, Content: '# * [Measure snow coverage of Mount Shasta](#6)', Start: 1958, End: 1974, Score: 0.85\nType: LOCATION, Line: 51, Content: '# * [Analyze the relationship between snow coverage and surface temperature](#8)', Start: 2071, End: 2086, Score: 0.85\nType: LOCATION, Line: 75, Content: '# Retrieve Sentinel-2 data over the Mount Shasta area by specifying the data location, time range, and property filters in the query.', Start: 2461, End: 2473, Score: 0.85\nType: PERSON, Line: 80, Content: 'search_rdc_args = {', Start: 2571, End: 2586, Score: 0.85\nType: PERSON, Line: 98, Content: '\"TimeRangeFilter\": {', Start: 3269, End: 3284, Score: 0.85\nType: PERSON, Line: 121, Content: 'search_rdc_args[\"NextToken\"] = search_result.get(\"NextToken\")', Start: 4042, End: 4070, Score: 0.85\nType: LOCATION, Line: 127, Content: '# ## Start an Earth Observation Job (EOJ) to identify the land cover types in the area of Mount Shasta', Start: 4223, End: 4235, Score: 0.85\nType: PERSON, Line: 151, Content: '\"TimeRangeFilter\": {', Start: 5029, End: 5044, Score: 0.85\nType: PERSON, Line: 200, Content: 'aoi_layer = map.visualize_eoj_aoi(Arn=eoj_arn, config=config)', Start: 6148, End: 6201, Score: 0.85\nType: PERSON, Line: 277, Content: 'mask_name = mask_dir + \"/\" + filename', Start: 8284, End: 8292, Score: 0.85\nType: PERSON, Line: 293, Content: 'cogs_bucket.download_file(url_parts.path[1:], tci_download_path)', Start: 8981, End: 9025, Score: 0.85\nType: LOCATION, Line: 313, Content: 'overlay_dir = \"./masks/mont_shasta_overlay\"', Start: 9390, End: 9401, Score: 0.85\nType: PERSON, Line: 314, Content: 'os.makedirs(overlay_dir, exist_ok=True)', Start: 9459, End: 9468, Score: 0.85\nType: LOCATION, Line: 326, Content: 'snow_mount_img = image_ds[100:400, 1000:1250]  # a crop of the Mount Shasta area', Start: 9968, End: 9980, Score: 0.85\nType: LOCATION, Line: 332, Content: 'red_img = np.zeros(snow_mount_img.shape, snow_mount_img.dtype)', Start: 10325, End: 10345, Score: 0.85\nType: LOCATION, Line: 378, Content: 'plt.title(\"Mount Shasta snow area from 2017 to 2022.\", fontsize=20)', Start: 11639, End: 11645, Score: 0.85\nType: PERSON, Line: 417, Content: 'search_rdc_args = {', Start: 12460, End: 12475, Score: 0.85\nType: PERSON, Line: 435, Content: '\"TimeRangeFilter\": {', Start: 13154, End: 13169, Score: 0.85\nType: PERSON, Line: 458, Content: 'search_rdc_args[\"NextToken\"] = search_result.get(\"NextToken\")', Start: 13925, End: 13953, Score: 0.85\nType: PERSON, Line: 468, Content: 'os.makedirs(lst_dir, exist_ok=True)', Start: 14096, End: 14104, Score: 0.85\nType: PERSON, Line: 478, Content: 'url_parts.path[1:],', Start: 14399, End: 14417, Score: 0.85\nType: PERSON, Line: 506, Content: 'mont_lst_c = (np.mean(mont_lst) * 0.00341802 + 149) - 273  # surface temperature in Celsius', Start: 15032, End: 15042, Score: 0.85\nType: LOCATION, Line: 538, Content: 'print(\"Pearson's correlction coefficient: %.2f\" % res.statistic)', Start: 15944, End: 15958, Score: 0.85\nType: PERSON, Line: 544, Content: 'fig, ax1 = plt.subplots(figsize=(8, 4))', Start: 16027, End: 16030, Score: 0.85"
                     },
                     {
                            "tool": "Safety",
                            "output_log": ""
                     }
              ]
       },
       "/Users/david/Desktop/Notebooks/amazon_segemaker_examples/lake_mead_drought_monitoring.ipynb": {
              "file_name": "/Users/david/Desktop/Notebooks/amazon_segemaker_examples/lake_mead_drought_monitoring.ipynb",
              "scanning_reports": [
                     {
                            "tool": "Detect-Secret",
                            "output_log": "{'version': '1.4.0', 'plugins_used': [{'name': 'ArtifactoryDetector'}, {'name': 'AWSKeyDetector'}, {'name': 'AzureStorageKeyDetector'}, {'name': 'Base64HighEntropyString', 'limit': 4.5}, {'name': 'BasicAuthDetector'}, {'name': 'CloudantDetector'}, {'name': 'DiscordBotTokenDetector'}, {'name': 'GitHubTokenDetector'}, {'name': 'HexHighEntropyString', 'limit': 3.0}, {'name': 'IbmCloudIamDetector'}, {'name': 'IbmCosHmacDetector'}, {'name': 'JwtTokenDetector'}, {'name': 'KeywordDetector', 'keyword_exclude': ''}, {'name': 'MailchimpDetector'}, {'name': 'NpmDetector'}, {'name': 'PrivateKeyDetector'}, {'name': 'SendGridDetector'}, {'name': 'SlackDetector'}, {'name': 'SoftlayerDetector'}, {'name': 'SquareOAuthDetector'}, {'name': 'StripeDetector'}, {'name': 'TwilioKeyDetector'}], 'filters_used': [{'path': 'detect_secrets.filters.allowlist.is_line_allowlisted'}, {'path': 'detect_secrets.filters.common.is_ignored_due_to_verification_policies', 'min_level': 2}, {'path': 'detect_secrets.filters.heuristic.is_indirect_reference'}, {'path': 'detect_secrets.filters.heuristic.is_likely_id_string'}, {'path': 'detect_secrets.filters.heuristic.is_lock_file'}, {'path': 'detect_secrets.filters.heuristic.is_not_alphanumeric_string'}, {'path': 'detect_secrets.filters.heuristic.is_potential_uuid'}, {'path': 'detect_secrets.filters.heuristic.is_prefixed_with_dollar_sign'}, {'path': 'detect_secrets.filters.heuristic.is_sequential_string'}, {'path': 'detect_secrets.filters.heuristic.is_swagger_file'}, {'path': 'detect_secrets.filters.heuristic.is_templated_secret'}], 'results': {}, 'generated_at': '2024-08-14T06:22:23Z'}"
                     },
                     {
                            "tool": "Whisper",
                            "output_log": "[]"
                     },
                     {
                            "tool": "Presidio-Analyzer",
                            "output_log": "Type: LOCATION, Line: 11, Content: '# ![This us-west-2 badge failed to load. Check your device's internet connectivity, otherwise the service is currently unavailable](https://prod.us-west-2.tcx-beacon.docs.aws.dev/sagemaker-nb/us-west-2/sagemaker-geospatial|lake-mead-drought-monitoring|lake_mead_drought_monitoring.ipynb)', Start: 268, End: 270, Score: 0.85\nType: LOCATION, Line: 45, Content: '# * [Start an Earth Observation Job (EOJ) to identify the land cover types in the area of Lake Mead](#3)', Start: 1758, End: 1762, Score: 0.85\nType: PERSON, Line: 77, Content: 'search_rdc_args = {', Start: 2352, End: 2367, Score: 0.85\nType: PERSON, Line: 95, Content: '\"TimeRangeFilter\": {', Start: 3050, End: 3065, Score: 0.85\nType: PERSON, Line: 118, Content: 'search_rdc_args[\"NextToken\"] = search_result.get(\"NextToken\")', Start: 3821, End: 3849, Score: 0.85\nType: PERSON, Line: 170, Content: '\"TimeRangeFilter\": {', Start: 5233, End: 5248, Score: 0.85\nType: PERSON, Line: 231, Content: 'aoi_layer = map.visualize_eoj_aoi(Arn=eoj_arn, config=config)', Start: 6481, End: 6534, Score: 0.85\nType: LOCATION, Line: 293, Content: '# ## Measure Lake Mead surface area', Start: 8055, End: 8064, Score: 0.85\nType: PERSON, Line: 315, Content: 'mask_name = mask_dir + \"/\" + filename', Start: 8572, End: 8580, Score: 0.85\nType: LOCATION, Line: 347, Content: 'overlay_dir = \"./masks/lake_mead_overlay\"', Start: 9506, End: 9517, Score: 0.85\nType: PERSON, Line: 348, Content: 'os.makedirs(overlay_dir, exist_ok=True)', Start: 9573, End: 9582, Score: 0.85"
                     },
                     {
                            "tool": "Safety",
                            "output_log": ""
                     }
              ]
       },
       "/Users/david/Desktop/Notebooks/amazon_segemaker_examples/dixie-wildfire-damage-assessment.ipynb": {
              "file_name": "/Users/david/Desktop/Notebooks/amazon_segemaker_examples/dixie-wildfire-damage-assessment.ipynb",
              "scanning_reports": [
                     {
                            "tool": "Detect-Secret",
                            "output_log": "{'version': '1.4.0', 'plugins_used': [{'name': 'ArtifactoryDetector'}, {'name': 'AWSKeyDetector'}, {'name': 'AzureStorageKeyDetector'}, {'name': 'Base64HighEntropyString', 'limit': 4.5}, {'name': 'BasicAuthDetector'}, {'name': 'CloudantDetector'}, {'name': 'DiscordBotTokenDetector'}, {'name': 'GitHubTokenDetector'}, {'name': 'HexHighEntropyString', 'limit': 3.0}, {'name': 'IbmCloudIamDetector'}, {'name': 'IbmCosHmacDetector'}, {'name': 'JwtTokenDetector'}, {'name': 'KeywordDetector', 'keyword_exclude': ''}, {'name': 'MailchimpDetector'}, {'name': 'NpmDetector'}, {'name': 'PrivateKeyDetector'}, {'name': 'SendGridDetector'}, {'name': 'SlackDetector'}, {'name': 'SoftlayerDetector'}, {'name': 'SquareOAuthDetector'}, {'name': 'StripeDetector'}, {'name': 'TwilioKeyDetector'}], 'filters_used': [{'path': 'detect_secrets.filters.allowlist.is_line_allowlisted'}, {'path': 'detect_secrets.filters.common.is_ignored_due_to_verification_policies', 'min_level': 2}, {'path': 'detect_secrets.filters.heuristic.is_indirect_reference'}, {'path': 'detect_secrets.filters.heuristic.is_likely_id_string'}, {'path': 'detect_secrets.filters.heuristic.is_lock_file'}, {'path': 'detect_secrets.filters.heuristic.is_not_alphanumeric_string'}, {'path': 'detect_secrets.filters.heuristic.is_potential_uuid'}, {'path': 'detect_secrets.filters.heuristic.is_prefixed_with_dollar_sign'}, {'path': 'detect_secrets.filters.heuristic.is_sequential_string'}, {'path': 'detect_secrets.filters.heuristic.is_swagger_file'}, {'path': 'detect_secrets.filters.heuristic.is_templated_secret'}], 'results': {}, 'generated_at': '2024-08-14T06:22:28Z'}"
                     },
                     {
                            "tool": "Whisper",
                            "output_log": "[]"
                     },
                     {
                            "tool": "Presidio-Analyzer",
                            "output_log": "Type: LOCATION, Line: 10, Content: '# ![This us-west-2 badge failed to load. Check your device's internet connectivity, otherwise the service is currently unavailable](https://prod.us-west-2.tcx-beacon.docs.aws.dev/sagemaker-nb/us-west-2/sagemaker-geospatial|dixie-wildfire-damage-assessment|dixie-wildfire-damage-assessment.ipynb)', Start: 271, End: 273, Score: 0.85\nType: PERSON, Line: 23, Content: '# - Step 4: [Visualize EOJ results in Amazon SageMaker geospatial Map SDK](#Visualize-EOJ-results-in-Amazon-SageMaker-geospatial-Map-SDK)', Start: 1350, End: 1365, Score: 0.85\nType: PERSON, Line: 74, Content: '# The data in cloud optimized GeoTIFF (COG) format allows a visual inspection of the impacted area before and after the wildfire.', Start: 3149, End: 3156, Score: 0.85\nType: PERSON, Line: 97, Content: '\"TimeRangeFilter\": {', Start: 4071, End: 4086, Score: 0.85\nType: PERSON, Line: 116, Content: 'next_token = search_result.get(\"NextToken\")', Start: 4698, End: 4726, Score: 0.85\nType: PERSON, Line: 169, Content: '\"TimeRangeFilter\": {', Start: 6684, End: 6699, Score: 0.85\nType: PERSON, Line: 182, Content: 'response = geospatial_client.start_earth_observation_job(', Start: 7057, End: 7102, Score: 0.85\nType: PERSON, Line: 264, Content: 'response = geospatial_client.export_earth_observation_job(', Start: 9108, End: 9154, Score: 0.85\nType: PERSON, Line: 296, Content: 'mask_dir = \"./dixie-wildfire-landcover/masks\"', Start: 10127, End: 10135, Score: 0.85\nType: LOCATION, Line: 320, Content: '\"vegetated\": \"olivedrab\",', Start: 10847, End: 10856, Score: 0.85\nType: PERSON, Line: 339, Content: 'masks_20210926 = extract_masks(\"20210926\")', Start: 11426, End: 11466, Score: 0.85\nType: PERSON, Line: 377, Content: 'plt.imshow(diff_mask, cmap=matplotlib.colors.ListedColormap([\"black\", \"crimson\", \"silver\"], N=None))', Start: 12503, End: 12548, Score: 0.85\nType: PERSON, Line: 379, Content: 'patches = [mpatches.Patch(color=\"crimson\", label=\"vegetation lost\")]', Start: 12618, End: 12638, Score: 0.85"
                     },
                     {
                            "tool": "Safety",
                            "output_log": ""
                     }
              ]
       }
}